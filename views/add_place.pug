html
    head

        meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
        meta(charset='utf-8')

        style.
            /* Always set the map height explicitly to define the size of the div
           * element that contains the map. */
          #map {
            height: 100%;
          }
          /* Optional: Makes the sample page fill the window. */
          html, body {
            height: 100%;
            margin: 0;
            padding: 0;
          }
          .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
          }

          #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
          }

          #pac-input:focus {
            border-color: #4d90fe;
          }

          .pac-container {
            font-family: Roboto;
          }

          #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
          }

          #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
          }

        link(href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet")
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/css/materialize.min.css")

        meta(name="viewport" content="width=device-width, initial-scale=1.0")

        script(type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/js/materialize.min.js")

    body

        
        .col.m1(style='position:absolute;z-index:10;margin-top:5%;padding-left:1%')
              a(href='/place/list')  
                    button.btn.waves-effect.waves-light.teal
                      |Regresar
                      i.material-icons.right keyboard_return
        .col.m1(style='position:absolute;z-index:10;margin-top:9%;padding-left:1%')
            button.btn.waves-effect.waves-light.teal#btn-save
                      |Guardar
                      i.material-icons.right save

        input#pac-input.controls(type='text', placeholder='Enter a location')
        #type-selector.controls
          input#changetype-all(type='radio', name='type', checked='checked')
          label(for='changetype-all') All
          input#changetype-establishment(type='radio', name='type')
          label(for='changetype-establishment') Establishments
          input#changetype-address(type='radio', name='type')
          label(for='changetype-address') Addresses
          input#changetype-geocode(type='radio', name='type')
          label(for='changetype-geocode') Geocodes
        #map
        
        
      
                
        
                
        

        script.
          // This example requires the Places library. Include the libraries=places
          // parameter when you first load the API. For example:
          // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
          function initMap() {
          var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13
          });
          var input = /** @type {!HTMLInputElement} */(
          document.getElementById('pac-input'));
          var types = document.getElementById('type-selector');
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
          var autocomplete = new google.maps.places.Autocomplete(input);
          autocomplete.bindTo('bounds', map);
          var infowindow = new google.maps.InfoWindow();
          var marker = new google.maps.Marker({
          map: map,
          anchorPoint: new google.maps.Point(0, -29)
          });
          autocomplete.addListener('place_changed', function() {
          infowindow.close();
          marker.setVisible(false);

          var url = window.location.hostname;
          var place = autocomplete.getPlace();
            $('#btn-save').click(function(){
                $.ajax({
                  method: "POST",
                  url: "http://"+url+"/api/place",
                  data: {place_id:place.place_id,location:[place.geometry.location.lat(),place.geometry.location.lng()],formatted_address:place.formatted_address}
                ,success: function(result){
                    alert( "Data Saved: " + result );
                    window.location = "/place/list";
                }})
                
          })
          console.log(place);
          if (!place.geometry) {
          window.alert("Autocomplete's returned place contains no geometry");
          return;
          }
          // If the place has a geometry, then present it on a map.
          if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
          } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);  // Why 17? Because it looks good.
          }
          marker.setIcon(/** @type {google.maps.Icon} */({
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
          }));
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);
          var address = '';
          if (place.address_components) {
          address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
          ].join(' ');
          }
          infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
          infowindow.open(map, marker);
          });
          // Sets a listener on a radio button to change the filter type on Places
          // Autocomplete.
          function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
          autocomplete.setTypes(types);
          });
          }
          setupClickListener('changetype-all', []);
          setupClickListener('changetype-address', ['address']);
          setupClickListener('changetype-establishment', ['establishment']);
          setupClickListener('changetype-geocode', ['geocode']);
        
          }
        
        script(src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA7G4kvKuFO9YFRKTkah_KJxurFUbvCA-Q&libraries=places&callback=initMap" async defer)
        